#!/bin/bash

echo "üéØ Quotify - VERSI√ìN FINAL CON ELECTRON COMPLETO"
echo "=============================================="

PACKAGE_NAME="Quotify-ELECTRON-FINAL-$(date +%Y%m%d-%H%M)"
DIST_DIR="/Users/darwinborges/Desktop/$PACKAGE_NAME"

echo "üì¶ Creando versi√≥n final con Electron completo..."

# Crear directorio principal limpio
rm -rf "$DIST_DIR"
mkdir -p "$DIST_DIR"
mkdir -p "$DIST_DIR/QuotifyApp"
mkdir -p "$DIST_DIR/documentacion"

# Copiar TODO el proyecto (incluyendo node_modules si existe)
echo "üìã Copiando proyecto completo..."
cp -r src "$DIST_DIR/QuotifyApp/"
cp -r public "$DIST_DIR/QuotifyApp/"
cp package.json "$DIST_DIR/QuotifyApp/"
cp package-lock.json "$DIST_DIR/QuotifyApp/"
cp vite.config.ts "$DIST_DIR/QuotifyApp/"
cp tsconfig.json "$DIST_DIR/QuotifyApp/"
cp tsconfig.node.json "$DIST_DIR/QuotifyApp/"
cp tailwind.config.js "$DIST_DIR/QuotifyApp/"
cp postcss.config.js "$DIST_DIR/QuotifyApp/"
cp index.html "$DIST_DIR/QuotifyApp/"

# Verificar que backend est√© incluido
if [ ! -f "$DIST_DIR/QuotifyApp/src/main/index.js" ]; then
    echo "‚ùå Error: Backend de Electron no encontrado"
    exit 1
fi

echo "‚úÖ Backend de Electron incluido correctamente"

cd "$DIST_DIR"

# 1. INSTALADOR COMPLETO
cat > "1Ô∏è‚É£ INSTALAR-QUOTIFY.command" << 'EOF'
#!/bin/bash

exec > >(tee /tmp/quotify_install.log) 2>&1

# Funci√≥n para mostrar ventanas sin terminal
show_dialog() {
    osascript -e "tell application \"System Events\" to display dialog \"$1\" buttons {\"$2\"} default button \"$2\" with icon note"
}

show_error() {
    osascript -e "tell application \"System Events\" to display dialog \"‚ùå $1\" buttons {\"Entendido\"} default button \"Entendido\" with icon stop"
}

show_progress() {
    osascript << APPLESCRIPT &
tell application "System Events"
    display dialog "$1" buttons {} giving up after $2 with icon note
end tell
APPLESCRIPT
    echo $!
}

# Mostrar inicio
if ! show_dialog "üéØ Quotify - Instalaci√≥n Completa

‚úÖ Instalar√° Electron + React completo
‚úÖ Transcripci√≥n funcional con OpenAI
‚úÖ Metadata de YouTube instant√°nea
‚úÖ Aplicaci√≥n nativa (no web)
üîá Completamente invisible despu√©s

¬øContinuar con la instalaci√≥n?" "Instalar"; then
    exit 0
fi

# Verificar Node.js
if ! command -v node &> /dev/null; then
    show_error "Node.js no est√° instalado.

Pasos:
1. Ve a: https://nodejs.org/
2. Descarga versi√≥n LTS
3. Instala y ejecuta este instalador otra vez"
    exit 1
fi

NODE_VERSION=$(node --version)
show_dialog "‚úÖ Node.js encontrado: $NODE_VERSION

Continuando con la instalaci√≥n..." "Continuar"

# Ir al directorio correcto
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$DIR/QuotifyApp"

# Mostrar progreso de instalaci√≥n
PROGRESS_PID=$(show_progress "üì¶ Instalando Quotify Electron...

‚è≥ Descargando dependencias (3-8 minutos)
üîß Configurando Electron + React
üîß Preparando transcripci√≥n con OpenAI
üîá Instalaci√≥n silenciosa en progreso

NO CIERRES esta ventana..." 500)

# Limpiar cache e instalar
npm cache clean --force &>/dev/null || true
npm install --silent --no-progress --loglevel=error &>/dev/null

INSTALL_RESULT=$?

# Cerrar ventana de progreso
kill $PROGRESS_PID 2>/dev/null || true

if [ $INSTALL_RESULT -ne 0 ]; then
    show_error "Error en la instalaci√≥n.

Soluciones:
‚Ä¢ Verifica conexi√≥n a internet estable
‚Ä¢ Cierra otras aplicaciones
‚Ä¢ Reinicia y prueba otra vez
‚Ä¢ Revisa el log: /tmp/quotify_install.log"
    exit 1
fi

show_dialog "‚úÖ ¬°Quotify Electron instalado correctamente!

üöÄ PARA USAR:
‚Ä¢ Doble clic en 'üéØ Abrir Quotify.app'
‚Ä¢ Se abrir√° como aplicaci√≥n nativa (Electron)
‚Ä¢ NO es versi√≥n web, es app completa

üî• INCLUYE TODO:
‚úÖ Aplicaci√≥n Electron nativa
‚úÖ Transcripci√≥n completa
‚úÖ Metadata de YouTube
‚úÖ Completamente invisible

üìñ Ayuda en carpeta 'documentacion'" "¬°Listo!"

EOF

chmod +x "1Ô∏è‚É£ INSTALAR-QUOTIFY.command"

# 2. CREAR APP BUNDLE CON ICONO BONITO
echo "üéØ Creando aplicaci√≥n con icono bonito..."

APP_DIR="$DIST_DIR/üéØ Abrir Quotify.app"
mkdir -p "$APP_DIR/Contents/MacOS"
mkdir -p "$APP_DIR/Contents/Resources"

# Crear icono usando el existente o generar uno nuevo
if [ -f "/Users/darwinborges/Desktop/Icono Quotify.png" ]; then
    # Usar icono existente
    ICONSET_DIR="/tmp/quotify.iconset"
    mkdir -p "$ICONSET_DIR"
    
    sips -z 1024 1024 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_1024x1024.png" 2>/dev/null || true
    sips -z 512 512 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_512x512.png" 2>/dev/null || true
    sips -z 256 256 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_256x256.png" 2>/dev/null || true
    sips -z 128 128 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_128x128.png" 2>/dev/null || true
    sips -z 64 64 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_64x64.png" 2>/dev/null || true
    sips -z 32 32 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_32x32.png" 2>/dev/null || true
    sips -z 16 16 "/Users/darwinborges/Desktop/Icono Quotify.png" --out "$ICONSET_DIR/icon_16x16.png" 2>/dev/null || true
    
    iconutil -c icns "$ICONSET_DIR" -o "$APP_DIR/Contents/Resources/quotify.icns" 2>/dev/null || true
    rm -rf "$ICONSET_DIR"
fi

# Crear Info.plist
cat > "$APP_DIR/Contents/Info.plist" << 'PLIST_EOF'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>quotify_launcher</string>
    <key>CFBundleIdentifier</key>
    <string>com.quotify.electron.app</string>
    <key>CFBundleName</key>
    <string>Quotify</string>
    <key>CFBundleDisplayName</key>
    <string>üéØ Abrir Quotify</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>CFBundleIconFile</key>
    <string>quotify</string>
    <key>LSUIElement</key>
    <true/>
    <key>NSHighResolutionCapable</key>
    <true/>
</dict>
</plist>
PLIST_EOF

# Crear launcher que ejecute ELECTRON (no web)
cat > "$APP_DIR/Contents/MacOS/quotify_launcher" << 'LAUNCHER_EOF'
#!/bin/bash

# Obtener directorio de la app
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
QUOTIFY_DIR="$DIR/../../../QuotifyApp"

osascript << 'APPLESCRIPT'

on showDialog(message, buttonText)
    tell application "System Events"
        display dialog message buttons {buttonText} default button buttonText with icon note
    end tell
end showDialog

on showChoice(message, buttonText)
    tell application "System Events"
        set userChoice to display dialog message buttons {"Cancelar", buttonText} default button buttonText with icon note
        return button returned of userChoice
    end tell
end showChoice

-- Preguntar si quiere abrir
set userResponse to showChoice("üéØ Quotify Electron

‚úÖ Aplicaci√≥n NATIVA (no web)
‚úÖ Backend + Frontend completo
‚úÖ Transcripci√≥n con OpenAI
‚úÖ Metadata de YouTube
üîá Completamente invisible

¬øIniciar Quotify Electron?", "üöÄ Abrir Quotify")

if userResponse is "Cancelar" then
    return
end if

-- Mostrar progreso
tell application "System Events"
    display dialog "üöÄ Iniciando Quotify Electron...

‚ö° Arrancando aplicaci√≥n nativa
‚ö° Cargando interfaz Electron
üîá Ejecut√°ndose invisiblemente
üì± Se abrir√° como app nativa (no navegador)

Esto toma 15-25 segundos..." buttons {} giving up after 30 with icon note
end tell

-- Obtener directorio del proyecto
set quotifyPath to "QUOTIFY_PATH_PLACEHOLDER"

-- Cerrar procesos anteriores
do shell script "pkill -f 'electron' 2>/dev/null || true"
do shell script "pkill -f 'vite' 2>/dev/null || true"
do shell script "pkill -f 'node.*5173' 2>/dev/null || true"

delay 3

-- Ejecutar Quotify ELECTRON (no npm run dev que es web)
-- Usar el comando de desarrollo que incluye Electron
do shell script "cd '" & quotifyPath & "' && nohup npm run dev > /dev/null 2>&1 &" without altering line endings

-- Esperar que Electron est√© listo
delay 20

-- Verificar si est√° funcionando
try
    -- Buscar proceso de Electron
    do shell script "pgrep -f 'electron.*quotify' > /dev/null 2>&1"
    
    showDialog("‚úÖ ¬°Quotify Electron funcionando!

üì± Aplicaci√≥n nativa abierta
üî• TODAS LAS FUNCIONES:
‚úÖ Metadata de YouTube
‚úÖ Transcripci√≥n con OpenAI
‚úÖ Extracci√≥n de quotes
‚úÖ Export/import

üîá Funcionando invisiblemente
üî¥ Para cerrar: Cierra ventana de Quotify", "¬°Perfecto!")
    
on error
    showDialog("‚è≥ Quotify est√° iniciando...

üì± Deber√≠a aparecer la ventana de Quotify
‚è±Ô∏è Dale 1-2 minutos m√°s

Si no aparece, ejecuta esta app otra vez.", "Entendido")
end try

APPLESCRIPT

LAUNCHER_EOF

# Reemplazar placeholder
sed -i '' "s|QUOTIFY_PATH_PLACEHOLDER|$QUOTIFY_DIR|g" "$APP_DIR/Contents/MacOS/quotify_launcher"
chmod +x "$APP_DIR/Contents/MacOS/quotify_launcher"

# 3. DOCUMENTACI√ìN
cat > "documentacion/GUIA-ELECTRON.txt" << 'EOF'
üéØ QUOTIFY ELECTRON - APLICACI√ìN NATIVA

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Esta versi√≥n de Quotify es una APLICACI√ìN NATIVA
usando Electron, NO es una p√°gina web.

üìã INSTALACI√ìN:
1. Doble clic: "1Ô∏è‚É£ INSTALAR-QUOTIFY.command"
2. Esperar instalaci√≥n (3-8 minutos)
3. ¬°Listo para usar!

üöÄ USO DIARIO:
1. Doble clic: "üéØ Abrir Quotify.app"
2. Se abre como aplicaci√≥n nativa
3. NO se abre en navegador

üî• VENTAJAS APLICACI√ìN NATIVA:
‚úÖ Funciona sin navegador
‚úÖ Mejor rendimiento
‚úÖ Acceso completo al sistema
‚úÖ Transcripci√≥n m√°s confiable
‚úÖ Funciona offline (despu√©s de transcribir)

üì± DIFERENCIAS CON VERSI√ìN WEB:
‚Ä¢ Se abre en ventana propia (no navegador)
‚Ä¢ Mejor acceso a archivos del sistema
‚Ä¢ Transcripci√≥n m√°s estable
‚Ä¢ Funciona sin conexi√≥n (para quotes ya creados)

EOF

echo ""
echo "‚úÖ VERSI√ìN ELECTRON FINAL CREADA!"
echo ""
echo "üìÇ ESTRUCTURA:"
echo "   üìã LEEME-DEFINITIVO.txt"
echo "   1Ô∏è‚É£ INSTALAR-QUOTIFY.command (INSTALADOR)"
echo "   üéØ Abrir Quotify.app (ELECTRON NATIVO)"
echo "   üìÅ documentacion/ (GU√çAS)"
echo "   üìÅ QuotifyApp/ (PROYECTO COMPLETO)"
echo ""
echo "üî• CARACTER√çSTICAS:"
echo "   ‚úÖ Aplicaci√≥n Electron nativa"
echo "   ‚úÖ Backend completo incluido"
echo "   ‚úÖ Transcripci√≥n funcional"
echo "   ‚úÖ Completamente invisible"
echo "   ‚úÖ Icono bonito"
echo ""

# Crear ZIP final
cd "/Users/darwinborges/Desktop"
zip -r "${PACKAGE_NAME}.zip" "$PACKAGE_NAME" -q

echo "üì¶ ZIP FINAL: ${PACKAGE_NAME}.zip"
echo ""
echo "üéâ ¬°LISTO PARA DISTRIBUCI√ìN!"